import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "./Dashboard.css";

const Dashboard = () => {
  const [userData, setUserData] = useState(null);
  const [qrCode, setQrCode] = useState("");
  const [is2FAEnabled, setIs2FAEnabled] = useState(false);
  const [twoFAToken, setTwoFAToken] = useState(""); // 2FA token
  const [loading, setLoading] = useState(true); // Loading state
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          navigate("/"); // No token, redirect to login page
          return;
        }

        const res = await axios.get("/api/auth/user", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        setUserData(res.data);
        setIs2FAEnabled(res.data.twoFactorEnabled); // Update 2FA status based on server response
        setLoading(false); // Turn off loading after data is received
      } catch (err) {
        console.error(err);
        navigate("/"); // If there's an issue with token or connection, redirect to login
      }
    };

    fetchData();
  }, [navigate]);

  // Logout function
  const handleLogout = () => {
    localStorage.removeItem("token"); // Remove token from localStorage
    navigate("/"); // Redirect to login page
  };

  const handleEnable2FA = async () => {
    try {
      const token = localStorage.getItem("token");
      const res = await axios.post(
        "/api/auth/2fa/setup",
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setQrCode(res.data.qrCode); // Show QR code for scanning
    } catch (err) {
      console.error("Failed to enable 2FA", err);
    }
  };

  const handleDisable2FA = async () => {
    try {
      const token = localStorage.getItem("token");
      await axios.post(
        "/api/auth/2fa/disable",
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setIs2FAEnabled(false); // Update 2FA status
      setQrCode(""); // Clear QR code
    } catch (err) {
      console.error("Failed to disable 2FA", err);
    }
  };

  const handleVerify2FA = async () => {
    try {
      const token = localStorage.getItem("token");
      const res = await axios.post(
        "/api/auth/2fa/verify",
        { userId: userData._id, token: twoFAToken }, // Send entered 2FA token for verification
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (res.data.verified) {
        alert("2FA verified successfully!");
        setIs2FAEnabled(true); // Mark 2FA as enabled after successful verification
        setQrCode(""); // Clear QR code after successful verification
      } else {
        alert("Invalid 2FA token.");
      }
    } catch (err) {
      console.error("Failed to verify 2FA", err);
      alert("2FA verification failed");
    }
  };

  if (loading) {
    return <div>Loading...</div>; // Show loading state until data is fetched
  }

  return (
    <div className="dashboard-container">
      <h1>Welcome, {userData.email}</h1>

      <div className="article-container">
        <h2>What is Two-Factor Authentication (2FA)?</h2>
        <p>
          Two-Factor Authentication (2FA) adds an extra layer of security to
          your account by requiring not only your password, but also a one-time
          code generated by an authentication app on your phone. This way, even
          if someone gets hold of your password, they won't be able to access
          your account without the second authentication factor.
        </p>
        <p>
          Enabling 2FA can significantly reduce the risk of unauthorized access
          to your sensitive information. We highly recommend turning on 2FA to
          enhance your account security.
        </p>
      </div>

      <div className="2fa-status-container">
        {is2FAEnabled ? (
          <>
            <p className="status-message">2FA is currently enabled.</p>
            <button onClick={handleDisable2FA} className="2fa-button">
              Disable 2FA
            </button>
          </>
        ) : (
          <>
            <p className="status-message">2FA is currently disabled.</p>
            <button onClick={handleEnable2FA} className="2fa-button">
              Enable 2FA
            </button>
            {qrCode && (
              <div className="qr-container">
                <p>Scan this QR code with your 2FA app:</p>
                <img src={qrCode} alt="QR Code" />
                <input
                  type="text"
                  value={twoFAToken}
                  onChange={(e) => setTwoFAToken(e.target.value)}
                  placeholder="Enter 2FA Token"
                  className="auth-input"
                />
                <button onClick={handleVerify2FA} className="2fa-button">
                  Verify 2FA
                </button>
              </div>
            )}
          </>
        )}
      </div>
      <button onClick={handleLogout} className="logout-button">
        Logout
      </button>
    </div>
  );
};

export default Dashboard;
